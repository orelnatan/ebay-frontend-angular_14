import { Component } from '@angular/core';
import { NavigationEnd, Router, Event as RouterNavigationEvent, ActivatedRoute, ActivatedRouteSnapshot, NavigationStart, Route, Data } from '@angular/router';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';

interface ICrumb {
   label: string;
}

@UntilDestroy()
@Component({
    selector: 'router-breadcrumbs',
    templateUrl: './router-breadcrumbs.component.html',
    styleUrls: ['./router-breadcrumbs.component.scss'],
})
export class RouterBreadcrumbsComponent {
    routes: Array<string> = [];
    crumbs: Array<ICrumb> = [];

    constructor(
        private readonly router: Router,
        private readonly activatedRoute: ActivatedRoute
    ) {
        this.router.events.pipe(untilDestroyed(this))
        .subscribe((event: RouterNavigationEvent): void => {
            if(event instanceof NavigationStart) {
                this.crumbs = [];
            }

            if(event instanceof NavigationEnd) {   
                this.routes = this._resolveRoutes();

                console.log(this.activatedRoute);
                console.log(this.router);

                this.crumbs[0] = this._resolveParentCrumbs(this.activatedRoute.snapshot);
                this.crumbs = this.crumbs.concat(this._resolveChildrenCrumbs(this.activatedRoute.snapshot.routeConfig?.children!));
            }
        })
    }

    navigate(index: number): void {       
        const path: string = this.routes.slice(0, index + 1).join("/");
     
        this.router.navigate([`/${path}`], { queryParamsHandling: 'preserve' });
    }

    private _resolveRoutes(): Array<string> {
        const routes: Array<string> = decodeURIComponent(window.location.pathname).split("/");
        routes.shift();
        
        return routes;
    }

    private _resolveParentCrumbs(activatedRouteSnapshot: ActivatedRouteSnapshot): ICrumb {
        if(!activatedRouteSnapshot.data['breadcrumbs']) return {} as ICrumb;

        return activatedRouteSnapshot.data['breadcrumbs'];
    }

    private _resolveChildrenCrumbs(children: Array<Route>): Array<ICrumb> {
        let crumbs: Array<ICrumb> = [];
    
        children.forEach((child: Route) => {  
            console.log(child)
            
            if(child.data && child.data!['breadcrumbs']) {
                crumbs.push(child.data!['breadcrumbs'])
            } 

            if((<any>child)._loadedRoutes) {
                crumbs = crumbs.concat(this._resolveChildrenCrumbs((<any>child)._loadedRoutes))
            }

            if(child.children) {
                crumbs = crumbs.concat(this._resolveChildrenCrumbs(child.children));
            }
        })

        return crumbs;
    }
}